# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        appearance_dict = {}
        counter = 0
        while head:
            if head in appearance_dict:
                return True
            else:
                appearance_dict[head] = counter 

            head = head.next
            counter += 1
        return False


=============================================
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        slow, fast = head, head

        while fast and fast.next:    
            slow = slow.next
            fast = fast.next.next
            if slow == fast:
                return True
        return False
#Floyd's tortuise and hare